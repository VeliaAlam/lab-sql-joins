-- 1.List the number of films per category.
SELECT 
    c.name AS category,
    COUNT(fc.film_id) AS number_of_films
FROM 
    sakila.category c
JOIN 
    sakila.film_category fc ON c.category_id = fc.category_id
GROUP BY 
    c.name
ORDER BY
    number_of_films DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT 
    s.store_id,
    ci.city AS city,
    co.country AS country
FROM 
    sakila.store s
JOIN 
    sakila.address a ON s.address_id = a.address_id
JOIN 
    sakila.city ci ON a.city_id = ci.city_id
JOIN 
    sakila.country co ON ci.country_id = co.country_id;

-- 3.Calculate the total revenue generated by each store in dollars.
SELECT 
    s.store_id,
    SUM(p.amount) AS total_revenue
FROM 
    sakila.payment p
JOIN 
    sakila.staff st ON p.staff_id = st.staff_id
JOIN 
    sakila.store s ON st.store_id = s.store_id
GROUP BY 
    s.store_id;
-- 4.  Determine the average running time of films for each category.
SELECT 
    c.name AS category,
    AVG(f.length) AS average_length
FROM 
    sakila.film f
JOIN 
    sakila.film_category fc ON f.film_id = fc.film_id
JOIN 
    sakila.category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY
    average_length DESC;
    
-- 5.  Identify the film categories with the longest average running time.    
WITH category_avg AS (
    SELECT 
        c.name AS category,
        AVG(f.length) AS average_length
    FROM 
        sakila.film f
    JOIN 
        sakila.film_category fc ON f.film_id = fc.film_id
    JOIN 
        sakila.category c ON fc.category_id = c.category_id
    GROUP BY 
        c.name
)
SELECT *
FROM category_avg
WHERE average_length = (SELECT MAX(average_length) FROM category_avg);

-- 6.  Display the top 10 most frequently rented movies in descending order.
SELECT 
    f.title,
    COUNT(r.rental_id) AS rental_count
FROM 
    sakila.rental r
JOIN 
    sakila.inventory i ON r.inventory_id = i.inventory_id
JOIN 
    sakila.film f ON i.film_id = f.film_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- 7.Determine of "Academy Dinosaur" can be rented from Store 1.
SELECT 
    f.title,
    i.store_id,
    COUNT(i.inventory_id) AS available_copies
FROM 
    sakila.inventory i
JOIN 
    sakila.film f ON i.film_id = f.film_id
WHERE 
    f.title = 'Academy Dinosaur'
    AND i.store_id = 1
GROUP BY 
    f.title, i.store_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
SELECT 
    f.title,
    CASE 
        WHEN IFNULL(COUNT(i.inventory_id), 0) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability
FROM 
    sakila.film f
LEFT JOIN 
    sakila.inventory i ON f.film_id = i.film_id
GROUP BY 
    f.title
ORDER BY 
    f.title;
